/**
 *
 */
import videojs from 'video.js';
import { toTitleCase } from '../utils/string-cases';
import SubtitleSettingMenuItem from './SubtitleSettingMenuItem';

const TextTrackButton = videojs.getComponent('TextTrackButton');
const SubsCapsMenuItem = videojs.getComponent('SubsCapsMenuItem');
/**
 * The button component for toggling and selecting captions and/or subtitles
 */

class SubtitleSettingButton extends TextTrackButton {
  constructor(player, options = {}) {
    options.label = 'subtitle';
    options.title = player.localize(toTitleCase(options.title || 'Subtitle'));
    super(player, options);

    // Although North America uses "captions" in most cases for
    // "captions and subtitles" other locales use "subtitles"
    this.label_ = 'subtitles';
    if (
      ['en', 'en-us', 'en-ca', 'fr-ca'].indexOf(this.player_.language_) > -1
    ) {
      this.label_ = 'captions';
    }
    this.menuButton_.controlText(toTitleCase(this.label_));
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */
  buildCSSClass() {
    return `vjs-subtitle-setting-button ${super.buildCSSClass()}`;
  }

  buildWrapperCSSClass() {
    return `vjs-subtitle-setting-button ${super.buildWrapperCSSClass()}`;
  }

  /**
   *
   */
  createSubtitleSettingButon() {
    const player = this.player_;

    const subtitleSettingMenuItem = new SubtitleSettingMenuItem(
      player,
      { selectable: false, label: 'Setting', title: 'Setting' },
      this
    );

    subtitleSettingMenuItem.addClass('vjs-subtitle-setting-menu-item');
    return subtitleSettingMenuItem;
  }

  /**
   * Create caption/subtitles menu items
   *
   * @return {*} The array of current menu items.
   */
  createItems() {
    let items = [];

    items = super.createItems(items, SubsCapsMenuItem);

    if (items.length > 0) {
      items.map(item => {
        if (item.options_.label.toLowerCase() === 'unknown') {
          item.hide();
        }
      });
    }

    if (!videojs.browser.IS_IPHONE) {
      items.push(this.createSubtitleSettingButon());
    }

    return items;
  }

  handleClick(event) {
    SubtitleSettingMenuItem.hide();
    super.handleClick(event);
  }
}

/**
 * `kind`s of TextTrack to look for to associate it with this menu.
 *
 */
SubtitleSettingButton.prototype.kinds_ = ['captions', 'subtitles'];

/**
 * The text that should display over the `SubsCapsButton`s controls.
 *
 */
SubtitleSettingButton.prototype.controlText_ = 'Subtitles';

export default SubtitleSettingButton;
