/*! @name @filmgardi/videojs-subtitle-settings @version 1.0.2 @license MIT */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('video.js')) :
  typeof define === 'function' && define.amd ? define(['video.js'], factory) :
  (global = global || self, global.videojsSubtitleSettings = factory(global.videojs));
}(this, function (videojs) { 'use strict';

  videojs = videojs && videojs.hasOwnProperty('default') ? videojs['default'] : videojs;

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  var version = "1.0.2";

  /**
   * @file string-cases.js
   * @module to-lower-case
   */
  /**
   * Uppercase the first letter of a string.
   *
   * @param {string} string
   *        String to be uppercased
   *
   * @return {string}
   *         The string with an uppercased first letter
   */

  var toTitleCase = function toTitleCase(string) {
    if (typeof string !== 'string') {
      return string;
    }

    return string.replace(/./, function (w) {
      return w.toUpperCase();
    });
  };

  var MenuItem = videojs.getComponent('MenuItem');

  var BaseMenuItem =
  /*#__PURE__*/
  function (_MenuItem) {
    _inheritsLoose(BaseMenuItem, _MenuItem);

    function BaseMenuItem(player, options) {
      return _MenuItem.call(this, player, options) || this;
    }

    var _proto = BaseMenuItem.prototype;

    _proto.apply = function apply() {
      if (this.player_) {
        if (this.player_.textTrackSettings) {
          this.player_.textTrackSettings.updateDisplay();
          this.player_.play(true);
        }
      }
    }
    /**
    * Any click on a `ColorItem` puts it into the selected state.
    * See {@link MenuItem#handleClick} for instances where this is called.
    *
    * @param {EventTarget~Event} event
    *        The `keydown`, `tap`, or `click` event that caused this function to be
    *        called.
    *
    * @listens tap
    * @listens click
    */
    ;

    _proto.handleClick = function handleClick(event) {
      this.apply();
    };

    return BaseMenuItem;
  }(MenuItem);

  var ColorItem =
  /*#__PURE__*/
  function (_BaseMenuItem) {
    _inheritsLoose(ColorItem, _BaseMenuItem);

    function ColorItem(player, options) {
      var _this;

      _this = _BaseMenuItem.call(this, player, options) || this;
      _this.colors_ = options.colors || ['#FFF', '#FF0', '#F00', '#00F'];
      _this.colorIndex = 0;

      _this.addClass('vjs-menu-item-color');

      return _this;
    }

    var _proto = ColorItem.prototype;

    _proto.increamentColorIndex = function increamentColorIndex() {
      if (this.colorIndex === this.colors_.length - 1) {
        this.colorIndex = 0;
      } else {
        this.colorIndex++;
      }
    };

    _proto.getColor = function getColor() {
      this.increamentColorIndex();
      var color = this.colors_[this.colorIndex];
      return color;
    }
    /**
    *
    */
    ;

    _proto.changeColor = function changeColor() {
      if (this.player_) {
        var textTrackSettings = this.player_.textTrackSettings;

        if (textTrackSettings) {
          var textTrackSettingValues = textTrackSettings.getValues();

          if (!textTrackSettingValues.color) {
            textTrackSettingValues.color = this.colors_[0];
          }

          textTrackSettingValues.color = this.getColor();
          textTrackSettings.setValues(textTrackSettingValues);
        }
      }
    }
    /**
    * Any click on a `ColorItem` puts it into the selected state.
    * See {@link MenuItem#handleClick} for instances where this is called.
    *
    * @param {EventTarget~Event} event
    *        The `keydown`, `tap`, or `click` event that caused this function to be
    *        called.
    *
    * @listens tap
    * @listens click
    */
    ;

    _proto.handleClick = function handleClick(event) {
      this.changeColor();

      _BaseMenuItem.prototype.handleClick.call(this, event);
    };

    return ColorItem;
  }(BaseMenuItem);

  var FontSizeItem =
  /*#__PURE__*/
  function (_BaseMenuItem) {
    _inheritsLoose(FontSizeItem, _BaseMenuItem);

    function FontSizeItem(player, options) {
      var _this;

      _this = _BaseMenuItem.call(this, player, options) || this;
      _this.sizes_ = ['0.75', '1.00', '1.25', '1.50'];
      _this.defaultSizes_ = null;
      _this.sizeIndex = 1;

      _this.addClass('vjs-menu-item-font');

      return _this;
    }

    var _proto = FontSizeItem.prototype;

    _proto.increamentSizeIndex = function increamentSizeIndex() {
      if (this.sizeIndex === this.sizes_.length - 1) {
        this.sizeIndex = 0;
      } else {
        this.sizeIndex++;
      }
    };

    _proto.getSize = function getSize() {
      this.increamentSizeIndex();
      var size = this.sizes_[this.sizeIndex];
      return size === '1.00' ? null : Number(size);
    }
    /**
    *
    */
    ;

    _proto.changeFontSize = function changeFontSize() {
      if (this.player_) {
        var textTrackSettings = this.player_.textTrackSettings;

        if (textTrackSettings) {
          var textTrackSettingValues = textTrackSettings.getValues();

          if (!textTrackSettingValues.fontPercent) {
            textTrackSettingValues.fontPercent = this.defaultSizes_;
          }

          textTrackSettingValues.fontPercent = this.getSize();
          textTrackSettings.setValues(textTrackSettingValues);
        }
      }
    }
    /**
    * Any click on a `FontSizeItem` puts it into the selected state.
    * See {@link BaseMenuItem#handleClick} for instances where this is called.
    *
    * @param {EventTarget~Event} event
    *        The `keydown`, `tap`, or `click` event that caused this function to be
    *        called.
    *
    * @listens tap
    * @listens click
    */
    ;

    _proto.handleClick = function handleClick(event) {
      this.changeFontSize();

      _BaseMenuItem.prototype.handleClick.call(this, event);
    };

    return FontSizeItem;
  }(BaseMenuItem);

  var BackgroundItem =
  /*#__PURE__*/
  function (_BaseMenuItem) {
    _inheritsLoose(BackgroundItem, _BaseMenuItem);

    function BackgroundItem(player, options) {
      var _this;

      _this = _BaseMenuItem.call(this, player, options) || this;
      _this.colors_ = options.colors || ['#000', '#FFF', '#F00', '#00F'];
      _this.colorIndex = 0;

      _this.addClass('vjs-menu-item-background');

      return _this;
    }

    var _proto = BackgroundItem.prototype;

    _proto.increamentColorIndex = function increamentColorIndex() {
      if (this.colorIndex === this.colors_.length - 1) {
        this.colorIndex = 0;
      } else {
        this.colorIndex++;
      }
    };

    _proto.getColor = function getColor() {
      this.increamentColorIndex();
      var color = this.colors_[this.colorIndex];
      return color;
    }
    /**
    *
    */
    ;

    _proto.changeColor = function changeColor() {
      if (this.player_) {
        var textTrackSettings = this.player_.textTrackSettings;

        if (textTrackSettings) {
          var textTrackSettingValues = textTrackSettings.getValues();

          if (!textTrackSettingValues.color) {
            textTrackSettingValues.color = this.colors_[0];
          }

          textTrackSettingValues.backgroundColor = this.getColor();
          textTrackSettings.setValues(textTrackSettingValues);
        }
      }
    }
    /**
    * Any click on a `BackgroundItem` puts it into the selected state.
    * See {@link BaseMenuItem#handleClick} for instances where this is called.
    *
    * @param {EventTarget~Event} event
    *        The `keydown`, `tap`, or `click` event that caused this function to be
    *        called.
    *
    * @listens tap
    * @listens click
    */
    ;

    _proto.handleClick = function handleClick(event) {
      this.changeColor();

      _BaseMenuItem.prototype.handleClick.call(this, event);
    };

    return BackgroundItem;
  }(BaseMenuItem);

  var BackItem =
  /*#__PURE__*/
  function (_BaseMenuItem) {
    _inheritsLoose(BackItem, _BaseMenuItem);

    /**
    *
    * @param {Player} player - vjs player
    * @param {Object} options - options object
    * @param {SubtitleSettingMenu} subtitleSettingMenu
    */
    function BackItem(player, options, subtitleSettingMenu) {
      var _this;

      _this = _BaseMenuItem.call(this, player, options) || this;
      _this.menu_ = subtitleSettingMenu;

      _this.addClass('vjs-menu-item-back');

      return _this;
    }
    /**
    * Any click on a `BackItem` puts it into the selected state.
    * See {@link BaseMenuItem#handleClick} for instances where this is called.
    *
    * @param {EventTarget~Event} event
    *        The `keydown`, `tap`, or `click` event that caused this function to be
    *        called.
    *
    * @listens tap
    * @listens click
    */


    var _proto = BackItem.prototype;

    _proto.handleClick = function handleClick(event) {
      if (this.menu_) {
        this.menu_.hide();
      }
    };

    return BackItem;
  }(BaseMenuItem);

  var MenuItem$1 = videojs.getComponent('MenuItem');
  var Component = videojs.getComponent('Component');
  var Dom = videojs.dom;

  var SubtitleSettingMenu =
  /*#__PURE__*/
  function () {
    /**
    *
    * @param {Player} player - vjs player
    * @param {Object} options - Item object
    * @param {*} parentEl
    */
    function SubtitleSettingMenu(player, options, parentEl) {
      // super(player, options);
      this.player = player;
      this.options = options;
      this.parent = parentEl;
      this.menu = {};
    }

    var _proto = SubtitleSettingMenu.prototype;

    _proto.createMenu = function createMenu() {
      var player = this.player;
      var menuEl = Dom.createEl('div', {
        className: 'vjs-menu vjs-menu-subtitle-setting',
        tabIndex: -1
      });
      var menuContentEl = Dom.createEl('ul', {
        className: 'vjs-menu-content ',
        tabIndex: -1
      });
      this.menu = new Component(player, {
        el: menuEl
      });
      var menuContent = new Component(player, {
        el: menuContentEl
      });
      var menuItemTitle = new MenuItem$1(player, {
        label: player.localize(toTitleCase('Setting')),
        selectable: false
      });
      var colorMenuItem = new ColorItem(player, {
        label: player.localize(toTitleCase('TextColor')),
        selectable: false
      });
      var fontSizeMenuItem = new FontSizeItem(player, {
        label: player.localize(toTitleCase('FontSize')),
        selectable: false
      });
      var backgroundMenuItem = new BackgroundItem(player, {
        label: player.localize(toTitleCase('BackgroundColor')),
        selectable: false
      });
      var backMenuItem = new BackItem(player, {
        label: player.localize(toTitleCase('Back')),
        selectable: false
      }, this);
      menuContent.addChild(menuItemTitle);
      menuContent.addChild(colorMenuItem);
      menuContent.addChild(fontSizeMenuItem);
      menuContent.addChild(backgroundMenuItem);
      menuContent.addChild(backMenuItem);
      this.menu.addChild(menuContent);

      if (this.parent) {
        this.parent.addChild(this.menu);
      }
    };

    _proto.hide = function hide() {
      if (this.menu) {
        this.menu.unlockShowing();
      }
    };

    _proto.show = function show() {
      if (this.menu) {
        this.menu.lockShowing();
      }
    };

    return SubtitleSettingMenu;
  }();

  var MenuItem$2 = videojs.getComponent('MenuItem');
  /**
   * Extend vjs menu item class.
   */

  var subtitleSettingMenu = {};

  var SubtitleSettingMenuItem =
  /*#__PURE__*/
  function (_MenuItem) {
    _inheritsLoose(SubtitleSettingMenuItem, _MenuItem);

    /**
    * Menu item constructor.
    *
    * @param {Player} player - vjs player
    * @param {Object} item - Item object
    * @param {SettingButton} item - Item object
    */
    function SubtitleSettingMenuItem(player, options, subtitleSettingButton) {
      var _this;

      options.label = player.localize(options.label);
      options.title = player.localize(options.title);
      _this = _MenuItem.call(this, player, options) || this;
      _this.options = options;
      _this.menuButton = subtitleSettingButton;

      _this.initial();

      return _this;
    }

    var _proto = SubtitleSettingMenuItem.prototype;

    _proto.initial = function initial() {
      this.createMenu();
    };

    _proto.createItems = function createItems() {
      // const player = this.player_;
      // new MenuItem(player, { label: 'color', selectable: true })
      return [];
    };

    _proto.createMenu = function createMenu() {
      subtitleSettingMenu = new SubtitleSettingMenu(this.player_, {}, this.menuButton);
      subtitleSettingMenu.createMenu();
    }
    /**
    * Click event for menu item.
    */
    ;

    _proto.handleClick = function handleClick(event) {
      subtitleSettingMenu.show();
    };

    return SubtitleSettingMenuItem;
  }(MenuItem$2);

  SubtitleSettingMenuItem.hide = function () {
    if (subtitleSettingMenu.hide) {
      subtitleSettingMenu.hide();
    }
  };

  SubtitleSettingMenuItem.show = function () {
    if (subtitleSettingMenu.show) {
      subtitleSettingMenu.show();
    }
  };

  var TextTrackButton = videojs.getComponent('TextTrackButton');
  var SubsCapsMenuItem = videojs.getComponent('SubsCapsMenuItem');
  /**
   * The button component for toggling and selecting captions and/or subtitles
   */

  var SubtitleSettingButton =
  /*#__PURE__*/
  function (_TextTrackButton) {
    _inheritsLoose(SubtitleSettingButton, _TextTrackButton);

    function SubtitleSettingButton(player, options) {
      var _this;

      if (options === void 0) {
        options = {};
      }

      options.label = 'subtitle';
      options.title = player.localize(toTitleCase(options.title || 'Subtitle'));
      _this = _TextTrackButton.call(this, player, options) || this; // Although North America uses "captions" in most cases for
      // "captions and subtitles" other locales use "subtitles"

      _this.label_ = 'subtitles';

      if (['en', 'en-us', 'en-ca', 'fr-ca'].indexOf(_this.player_.language_) > -1) {
        _this.label_ = 'captions';
      }

      _this.menuButton_.controlText(toTitleCase(_this.label_));

      return _this;
    }
    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */


    var _proto = SubtitleSettingButton.prototype;

    _proto.buildCSSClass = function buildCSSClass() {
      return "vjs-subtitle-setting-button " + _TextTrackButton.prototype.buildCSSClass.call(this);
    };

    _proto.buildWrapperCSSClass = function buildWrapperCSSClass() {
      return "vjs-subtitle-setting-button " + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
    }
    /**
     *
     */
    ;

    _proto.createSubtitleSettingButon = function createSubtitleSettingButon() {
      var player = this.player_;
      var subtitleSettingMenuItem = new SubtitleSettingMenuItem(player, {
        selectable: false,
        label: 'Setting',
        title: 'Setting'
      }, this);
      subtitleSettingMenuItem.addClass('vjs-subtitle-setting-menu-item');
      return subtitleSettingMenuItem;
    }
    /**
     * Create caption/subtitles menu items
     *
     * @return {*} The array of current menu items.
     */
    ;

    _proto.createItems = function createItems() {
      var items = [];
      items = _TextTrackButton.prototype.createItems.call(this, items, SubsCapsMenuItem);

      if (items.length > 0) {
        items.map(function (item) {
          if (item.options_.label.toLowerCase() === 'unknown') {
            item.hide();
          }
        });
      }

      if (!videojs.browser.IS_IPHONE) {
        items.push(this.createSubtitleSettingButon());
      }

      return items;
    };

    _proto.handleClick = function handleClick(event) {
      SubtitleSettingMenuItem.hide();

      _TextTrackButton.prototype.handleClick.call(this, event);
    };

    return SubtitleSettingButton;
  }(TextTrackButton);
  /**
   * `kind`s of TextTrack to look for to associate it with this menu.
   *
   */


  SubtitleSettingButton.prototype.kinds_ = ['captions', 'subtitles'];
  /**
   * The text that should display over the `SubsCapsButton`s controls.
   *
   */

  SubtitleSettingButton.prototype.controlText_ = 'Subtitles';

  var Plugin = videojs.getPlugin('plugin'); // Default options for the plugin.

  var defaults = {};
  /**
   * An advanced Video.js plugin. For more information on the API
   *
   * See: https://blog.videojs.com/feature-spotlight-advanced-plugins/
   */

  var SubtitleSettings =
  /*#__PURE__*/
  function (_Plugin) {
    _inheritsLoose(SubtitleSettings, _Plugin);

    /**
     * Create a Settings plugin instance.
     *
     * @param  {Player} player
     *         A Video.js Player instance.
     *
     * @param  {Object} [options]
     *         An optional options object.
     *
     *         While not a core part of the Video.js plugin architecture, a
     *         second argument of options is a convenient way to accept inputs
     *         from your plugin's caller.
     */
    function SubtitleSettings(player, options) {
      var _this;

      // the parent class will add player under this.player
      _this = _Plugin.call(this, player) || this;
      _this.options = videojs.mergeOptions(defaults, options);

      _this.player.ready(function () {
        _this.player.addClass('vjs-subtitle-settings');

        _this.createSettingButton();
      });

      return _this;
    }
    /**
     * Adds the setting menu button to the player control bar.
     *
     */


    var _proto = SubtitleSettings.prototype;

    _proto.createSettingButton = function createSettingButton() {
      var player = this.player;
      this.settingButton = new SubtitleSettingButton(player);
      var placementIndex = player.controlBar.children().length - 3;
      var settingButtonInstance = player.controlBar.addChild(this.settingButton, {
        componentClass: 'subtitleSettingMenu'
      }, this.options.placementIndex || placementIndex);
      settingButtonInstance.addClass('vjs-subtitle-setting-menu');
      this.setButtonInnerText('subtitle setting');
      settingButtonInstance.removeClass('vjs-hidden');
    }
    /**
     *Set inner button text.
     *
     * @param {string} text - the text to display in the button.
     */
    ;

    _proto.setButtonInnerText = function setButtonInnerText(text) {
      this.settingButton.menuButton_.$('.vjs-control-text').innerHTML = text;
    };

    return SubtitleSettings;
  }(Plugin); // Define default values for the plugin's `state` object here.


  SubtitleSettings.defaultState = {}; // Include the version number.

  SubtitleSettings.VERSION = version; // Register the plugin with video.js.

  videojs.registerPlugin('subtitleSettings', SubtitleSettings);

  return SubtitleSettings;

}));
